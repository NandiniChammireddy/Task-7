# -*- coding: utf-8 -*-
"""Task-7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zTCfss5mO46BosmJHs3m7hL776QyYUlm
"""

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
iris = load_iris()
X = iris.data
y = iris.target
target_names = iris.target_names
pca = PCA(n_components=2)
X_r = pca.fit_transform(X)
pca_df = pd.DataFrame(X_r, columns=["PC1", "PC2"])
pca_df['Target'] = y
plt.figure(figsize=(8, 6))
for i, target in enumerate(set(y)):
    plt.scatter(pca_df[pca_df['Target'] == target]['PC1'],
                pca_df[pca_df['Target'] == target]['PC2'],
                label=target_names[i])
plt.title('PCA of IRIS Dataset')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
df = pd.read_csv("stock_prices.csv")
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)
df = df.asfreq('D')  # assumes daily data
df = df.fillna(method='ffill')
plt.figure(figsize=(10, 5))
plt.plot(df['Close'], label='Close Price')
plt.title("Stock Close Price Over Time")
plt.xlabel("Date")
plt.ylabel("Price")
plt.grid(True)
plt.legend()
plt.show()
df['Close_lag1'] = df['Close'].shift(1)
df['RollingMean_7'] = df['Close'].rolling(window=7).mean()
df.dropna(inplace=True)
train_size = int(len(df) * 0.8)
train = df['Close'][:train_size]
test = df['Close'][train_size:]
model = ARIMA(train, order=(5, 1, 0))
model_fit = model.fit()
forecast = model_fit.forecast(steps=len(test))
forecast = pd.Series(forecast, index=test.index)
plt.figure(figsize=(10, 5))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.plot(forecast, label='Forecast', color='red')
plt.title("ARIMA Forecast vs Actual")
plt.legend()
plt.grid(True)
plt.show()
mae = mean_absolute_error(test, forecast)
rmse = np.sqrt(mean_squared_error(test, forecast))
mape = mean_absolute_percentage_error(test, forecast)
print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"MAPE: {mape:.2%}")